{
  "address": "0xEAB2148955660c10ED313d65b38e5B928b779D18",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheapWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x46437f610d58de2b5784910bdc847e3cd31ed5176720a68e2871ee3729a8fe02",
  "receipt": {
    "to": null,
    "from": "0xbF33Ac0c5fEEb284dEE5677a9006221a8FA03f9E",
    "contractAddress": "0xEAB2148955660c10ED313d65b38e5B928b779D18",
    "transactionIndex": 71,
    "gasUsed": "1055118",
    "logsBloom": "0x
    "blockHash": "0xf12e480164b13cb50075f13552cab2a3115c72a3e7feaa66e392b8ed5d78b5df",
    "transactionHash": "0x46437f610d58de2b5784910bdc847e3cd31ed5176720a68e2871ee3729a8fe02",
    "logs": [],
    "blockNumber": 7859827,
    "cumulativeGasUsed": "17773604",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 3,
  "solcInputHash": "ad38dfb7b124ed9e805ac3409ab2dd23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheapWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Prabin baral\",\"details\":\"this implements price feed as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"this organize the s_funders and amount in mapping\"}},\"title\":\"A contract for crowedFunding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"this function funds the contract\"}},\"notice\":\"this contract is to demo the sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n//pragma\\npragma solidity ^0.8.9;\\n\\n//import\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n//error\\nerror FundMe__NotOwner();\\n\\n/**\\n * @title A contract for crowedFunding\\n * @author Prabin baral\\n * @notice this contract is to demo the sample funding contract\\n * @dev this implements price feed as our library\\n */\\n//contract\\ncontract FundMe {\\n    //type declarations\\n    using PriceConverter for uint256;\\n\\n    //state variable\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     * @notice this function funds the contract\\n     * @dev this organize the s_funders and amount in mapping\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        // ETH/USD price feed address of Goerli Network.\\n        // AggregatorV3Interface s_priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\\n        return s_priceFeed.version();\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheapWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 _index) public view returns (address) {\\n        return s_funders[_index];\\n    }\\n\\n    function getAddressToAmountFunded(address _funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[_funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x9222bbd6742dc707cf276d5fcceb1ba81ca3950953c310cf3af49876db99a648\",\"license\":\"UNLICENSED\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Goerli ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/   0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(priceFeed);\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x339d7ccce8c84cf63b42fc5410c426c022aa2e42b430654f723460aece4cf88a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620013383803806200133883398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b6080516111b8620001806000396000818161041d0152818161061301528181610729015261097801526111b86000f3fe60806040526004361061008a5760003560e01c80633ccfd60b116100595780633ccfd60b1461015f5780636b69a59214610176578063893d20e8146101a15780639e87a5cd146101cc578063b60d4288146101f757610099565b80630343fb25146100a35780630d8e6e2c146100e0578063206ddccd1461010b5780633a7b6c741461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b9d565b61033b565b6040516100d79190610be3565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610be3565b60405180910390f35b34801561011757600080fd5b5061012061041b565b005b34801561012e57600080fd5b5061014960048036038101906101449190610c2a565b6106df565b6040516101569190610c66565b60405180910390f35b34801561016b57600080fd5b50610174610727565b005b34801561018257600080fd5b5061018b610967565b6040516101989190610be3565b60405180910390f35b3480156101ad57600080fd5b506101b6610974565b6040516101c39190610c66565b60405180910390f35b3480156101d857600080fd5b506101e161099c565b6040516101ee9190610ce0565b60405180910390f35b6101ff610201565b005b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109c690919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d58565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610da7565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190610df0565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561052457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104da575b5050505050905060005b81518110156105ae57600082828151811061054c5761054b610e1d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105a690610e4c565b91505061052e565b50600067ffffffffffffffff8111156105ca576105c9610e94565b5b6040519080825280602002602001820160405280156105f85781602001602082028036833780820191505090505b506001908051906020019061060e929190610a93565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161065590610ef4565b60006040518083038185875af1925050503d8060008114610692576040519150601f19603f3d011682016040523d82523d6000602084013e610697565b606091505b50509050806106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d290610f55565b60405180910390fd5b5050565b6000600182815481106106f5576106f4610e1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ac576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610857576000600182815481106107d2576107d1610e1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084f90610e4c565b9150506107af565b50600067ffffffffffffffff81111561087357610872610e94565b5b6040519080825280602002602001820160405280156108a15781602001602082028036833780820191505090505b50600190805190602001906108b7929190610a93565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108de90610ef4565b60006040518083038185875af1925050503d806000811461091b576040519150601f19603f3d011682016040523d82523d6000602084013e610920565b606091505b5050905080610964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095b90610f55565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806109d283610a02565b90506000670de0b6b3a764000085836109eb9190610f75565b6109f59190610fe6565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a74919061108f565b5050509150506402540be40081610a8b919061110a565b915050919050565b828054828255906000526020600020908101928215610b0c579160200282015b82811115610b0b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab3565b5b509050610b199190610b1d565b5090565b5b80821115610b36576000816000905550600101610b1e565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6a82610b3f565b9050919050565b610b7a81610b5f565b8114610b8557600080fd5b50565b600081359050610b9781610b71565b92915050565b600060208284031215610bb357610bb2610b3a565b5b6000610bc184828501610b88565b91505092915050565b6000819050919050565b610bdd81610bca565b82525050565b6000602082019050610bf86000830184610bd4565b92915050565b610c0781610bca565b8114610c1257600080fd5b50565b600081359050610c2481610bfe565b92915050565b600060208284031215610c4057610c3f610b3a565b5b6000610c4e84828501610c15565b91505092915050565b610c6081610b5f565b82525050565b6000602082019050610c7b6000830184610c57565b92915050565b6000819050919050565b6000610ca6610ca1610c9c84610b3f565b610c81565b610b3f565b9050919050565b6000610cb882610c8b565b9050919050565b6000610cca82610cad565b9050919050565b610cda81610cbf565b82525050565b6000602082019050610cf56000830184610cd1565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d42601b83610cfb565b9150610d4d82610d0c565b602082019050919050565b60006020820190508181036000830152610d7181610d35565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db282610bca565b9150610dbd83610bca565b9250828201905080821115610dd557610dd4610d78565b5b92915050565b600081519050610dea81610bfe565b92915050565b600060208284031215610e0657610e05610b3a565b5b6000610e1484828501610ddb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e5782610bca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e8957610e88610d78565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ede600083610ec3565b9150610ee982610ece565b600082019050919050565b6000610eff82610ed1565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f3f600b83610cfb565b9150610f4a82610f09565b602082019050919050565b60006020820190508181036000830152610f6e81610f32565b9050919050565b6000610f8082610bca565b9150610f8b83610bca565b9250828202610f9981610bca565b91508282048414831517610fb057610faf610d78565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ff182610bca565b9150610ffc83610bca565b92508261100c5761100b610fb7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61103681611017565b811461104157600080fd5b50565b6000815190506110538161102d565b92915050565b6000819050919050565b61106c81611059565b811461107757600080fd5b50565b60008151905061108981611063565b92915050565b600080600080600060a086880312156110ab576110aa610b3a565b5b60006110b988828901611044565b95505060206110ca8882890161107a565b94505060406110db88828901610ddb565b93505060606110ec88828901610ddb565b92505060806110fd88828901611044565b9150509295509295909350565b600061111582611059565b915061112083611059565b925082820261112e81611059565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561116657611165610d78565b5b828205841483151761117b5761117a610d78565b5b509291505056fea26469706673582212206aae4e3e223a9ab1cacf7dbd22751101496916d371f290b4c46a35230dd0f51264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80633ccfd60b116100595780633ccfd60b1461015f5780636b69a59214610176578063893d20e8146101a15780639e87a5cd146101cc578063b60d4288146101f757610099565b80630343fb25146100a35780630d8e6e2c146100e0578063206ddccd1461010b5780633a7b6c741461012257610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b9d565b61033b565b6040516100d79190610be3565b60405180910390f35b3480156100ec57600080fd5b506100f5610383565b6040516101029190610be3565b60405180910390f35b34801561011757600080fd5b5061012061041b565b005b34801561012e57600080fd5b5061014960048036038101906101449190610c2a565b6106df565b6040516101569190610c66565b60405180910390f35b34801561016b57600080fd5b50610174610727565b005b34801561018257600080fd5b5061018b610967565b6040516101989190610be3565b60405180910390f35b3480156101ad57600080fd5b506101b6610974565b6040516101c39190610c66565b60405180910390f35b3480156101d857600080fd5b506101e161099c565b6040516101ee9190610ce0565b60405180910390f35b6101ff610201565b005b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109c690919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d58565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610da7565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104169190610df0565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561052457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104da575b5050505050905060005b81518110156105ae57600082828151811061054c5761054b610e1d565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806105a690610e4c565b91505061052e565b50600067ffffffffffffffff8111156105ca576105c9610e94565b5b6040519080825280602002602001820160405280156105f85781602001602082028036833780820191505090505b506001908051906020019061060e929190610a93565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161065590610ef4565b60006040518083038185875af1925050503d8060008114610692576040519150601f19603f3d011682016040523d82523d6000602084013e610697565b606091505b50509050806106db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d290610f55565b60405180910390fd5b5050565b6000600182815481106106f5576106f4610e1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ac576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610857576000600182815481106107d2576107d1610e1d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084f90610e4c565b9150506107af565b50600067ffffffffffffffff81111561087357610872610e94565b5b6040519080825280602002602001820160405280156108a15781602001602082028036833780820191505090505b50600190805190602001906108b7929190610a93565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108de90610ef4565b60006040518083038185875af1925050503d806000811461091b576040519150601f19603f3d011682016040523d82523d6000602084013e610920565b606091505b5050905080610964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095b90610f55565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806109d283610a02565b90506000670de0b6b3a764000085836109eb9190610f75565b6109f59190610fe6565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a74919061108f565b5050509150506402540be40081610a8b919061110a565b915050919050565b828054828255906000526020600020908101928215610b0c579160200282015b82811115610b0b5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610ab3565b5b509050610b199190610b1d565b5090565b5b80821115610b36576000816000905550600101610b1e565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b6a82610b3f565b9050919050565b610b7a81610b5f565b8114610b8557600080fd5b50565b600081359050610b9781610b71565b92915050565b600060208284031215610bb357610bb2610b3a565b5b6000610bc184828501610b88565b91505092915050565b6000819050919050565b610bdd81610bca565b82525050565b6000602082019050610bf86000830184610bd4565b92915050565b610c0781610bca565b8114610c1257600080fd5b50565b600081359050610c2481610bfe565b92915050565b600060208284031215610c4057610c3f610b3a565b5b6000610c4e84828501610c15565b91505092915050565b610c6081610b5f565b82525050565b6000602082019050610c7b6000830184610c57565b92915050565b6000819050919050565b6000610ca6610ca1610c9c84610b3f565b610c81565b610b3f565b9050919050565b6000610cb882610c8b565b9050919050565b6000610cca82610cad565b9050919050565b610cda81610cbf565b82525050565b6000602082019050610cf56000830184610cd1565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d42601b83610cfb565b9150610d4d82610d0c565b602082019050919050565b60006020820190508181036000830152610d7181610d35565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610db282610bca565b9150610dbd83610bca565b9250828201905080821115610dd557610dd4610d78565b5b92915050565b600081519050610dea81610bfe565b92915050565b600060208284031215610e0657610e05610b3a565b5b6000610e1484828501610ddb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e5782610bca565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e8957610e88610d78565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ede600083610ec3565b9150610ee982610ece565b600082019050919050565b6000610eff82610ed1565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f3f600b83610cfb565b9150610f4a82610f09565b602082019050919050565b60006020820190508181036000830152610f6e81610f32565b9050919050565b6000610f8082610bca565b9150610f8b83610bca565b9250828202610f9981610bca565b91508282048414831517610fb057610faf610d78565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ff182610bca565b9150610ffc83610bca565b92508261100c5761100b610fb7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61103681611017565b811461104157600080fd5b50565b6000815190506110538161102d565b92915050565b6000819050919050565b61106c81611059565b811461107757600080fd5b50565b60008151905061108981611063565b92915050565b600080600080600060a086880312156110ab576110aa610b3a565b5b60006110b988828901611044565b95505060206110ca8882890161107a565b94505060406110db88828901610ddb565b93505060606110ec88828901610ddb565b92505060806110fd88828901611044565b9150509295509295909350565b600061111582611059565b915061112083611059565b925082820261112e81611059565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561116657611165610d78565b5b828205841483151761117b5761117a610d78565b5b509291505056fea26469706673582212206aae4e3e223a9ab1cacf7dbd22751101496916d371f290b4c46a35230dd0f51264736f6c63430008110033",
  "devdoc": {
    "author": "Prabin baral",
    "details": "this implements price feed as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "this organize the s_funders and amount in mapping"
      }
    },
    "title": "A contract for crowedFunding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "this function funds the contract"
      }
    },
    "notice": "this contract is to demo the sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}